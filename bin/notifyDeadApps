#! /app/.heroku/node/bin/node
const Parse = require('parse/node');
const push = require('../cloud/push.js');
const _ = require('lodash');
const moment = require('moment');

Parse.initialize('PkngqKtJygU9WiQ1GXM9eC0a17tKmioKKmpWftYr');
Parse.serverURL = process.env.SERVER_URL || 'http://localhost:5000/parse';

const notifyDeadApps = function notifyDeadApps() {
  // setup time threshold
  const timeExpiryThreshold = moment.utc().subtract(12, 'hours').toDate();

  // find all users who have had a location update in the last 12 hours
  const locationUpdateQuery = new Parse.Query('LocationUpdates');
  locationUpdateQuery.greaterThanOrEqualTo('createdAt', timeExpiryThreshold);
  locationUpdateQuery.descending('createdAt');
  locationUpdateQuery.limit(10000);
  locationUpdateQuery.find().then(locationUpdates => {
    // get all users with valid location updates
    const vendorIdSet = new Set();
    _.forEach(locationUpdates, (currentLocationUpdate) => {
      vendorIdSet.add(currentLocationUpdate.get('vendorId'));
    });

    // query for all users who do not have valid heartbeats
    const userQuery = new Parse.Query(Parse.User);
    userQuery.notContainedIn('vendorId', Array.from(vendorIdSet));
    userQuery.descending('createdAt');
    return userQuery.find();
  }).then(users => {
    const pushTokens = [];
    const vendorIds = [];

    _.forEach(users, (currentUser) => {
      if (currentUser.get('pushToken') !== '') {
        pushTokens.push(currentUser.get('pushToken'));
        vendorIds.push(currentUser.get('vendorId'));
      }
    });

    const message = 'Hi! Looks like LES closed on your phone. ' +
      'Remember not to swipe up and terminate LES, and please limit low-battery mode usage. ' +
      'Tap/swipe on me start it up again!';
    push.sendPushWithMessage(pushTokens, message, undefined);

    // successfully notified dead apps
    let ServerLog = Parse.Object.extend('ServerLog');
    let newServerLog = new ServerLog();
    newServerLog.set('caller', 'notifyDeadApps');
    newServerLog.set('success', true);
    newServerLog.set('logString',
      'Notified dead applications for IDs: [' + vendorIds.join(', ') + ']');
    return newServerLog.save();
  }).catch(error => {
    console.error(error);

    // unsuccessfully notified dead apps
    let ServerLog = Parse.Object.extend('ServerLog');
    let newServerLog = new ServerLog();
    newServerLog.set('caller', 'notifyDeadApps');
    newServerLog.set('success', false);
    newServerLog.set('logString', 'Error in notifying dead applications: ' + error);
    return newServerLog.save();
  });
};

notifyDeadApps();
