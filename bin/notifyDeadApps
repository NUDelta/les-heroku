#! /app/.heroku/node/bin/node
const Parse = require('parse/node');
const push = require('../cloud/push.js');
const _ = require('lodash');
const moment = require('moment');

Parse.initialize('PkngqKtJygU9WiQ1GXM9eC0a17tKmioKKmpWftYr');
Parse.serverURL = 'https://les-expand.herokuapp.com/parse/';

const notifyDeadApps = function notifyDeadApps() {
  // setup time threshold
  const timeExpiryThreshold = moment().subtract(8, 'hours').toDate();

  // find all users who have had a heartbeat in the last 8 hours
  const heartbeatQuery = new Parse.Query('ApplicationHeartbeat');
  heartbeatQuery.equalTo('logString', 'Application heartbeat');
  heartbeatQuery.greaterThanOrEqualTo('createdAt', timeExpiryThreshold);
  heartbeatQuery.descending('createdAt');
  heartbeatQuery.limit(10000);
  heartbeatQuery.find().then(heartbeats => {
    // get all users with valid heartbeats
    const vendorIdSet = new Set();
    _.forEach(heartbeats, (currentHeartbeat) => {
      vendorIdSet.add(currentHeartbeat.get('vendor_id'));
    });

    // query for all users who do not have valid heartbeats
    const userQuery = new Parse.Query(Parse.User);
    userQuery.notContainedIn('vendorId', Array.from(vendorIdSet));
    userQuery.descending('createdAt');
    return userQuery.find();
  }).then(users => {
    const pushTokens = [];
    _.forEach(users, (currentUser) => {
      if (currentUser.get('pushToken') !== '') {
        pushTokens.push(currentUser.get('pushToken'));
      }
    });

    const message = 'Hi! It seems that LES closed on your phone. ' +
      'Swipe right or tap to start it up again!';
    push.sendPushWithMessage(pushTokens, message, status);
  }).catch(error => {
    status.error(error);
  });
};

notifyDeadApps();
