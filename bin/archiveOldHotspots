#! /app/.heroku/node/bin/node
const Parse = require('parse/node');
const moment = require('moment');

Parse.initialize('PkngqKtJygU9WiQ1GXM9eC0a17tKmioKKmpWftYr');
Parse.serverURL = process.env.SERVER_URL || 'http://localhost:5000/parse';
console.log(process.env.SERVER_URL || 'http://localhost:5000/parse');

const archiveOldHotspots = function () {
  // setup time threshold
  const timeExpiryThreshold = moment().subtract(4, 'hours').toDate();

  // fetch objects that are ready to be archived
  const taskLocationQuery = new Parse.Query('TaskLocations');
  taskLocationQuery.notEqualTo('archived', true);
  taskLocationQuery.lessThan('createdAt', timeExpiryThreshold);
  taskLocationQuery.each(taskLocationToArchive => {
    taskLocationToArchive.set('archiver', 'system');
    taskLocationToArchive.save();
  }).then(() => {
    console.log('Routine archiving completed successfully.');

    // log successful archiving
    let ServerLog = Parse.Object.extend('ServerLog');
    let newServerLog = new ServerLog();
    newServerLog.set('caller', 'archiveOldHotspots');
    newServerLog.set('success', true);
    newServerLog.set('logString', 'Routine archiving completed successfully.');
    return newServerLog.save();
  }).catch(error => {
    console.error('Routine archiving failed with error: ' + error);

    // log unsuccessful archiving
    let ServerLog = Parse.Object.extend('ServerLog');
    let newServerLog = new ServerLog();
    newServerLog.set('caller', 'archiveOldHotspots');
    newServerLog.set('success', false);
    newServerLog.set('logString', 'Routine archiving failed with error: ' + error);
    return newServerLog.save();
  });
};

archiveOldHotspots();
